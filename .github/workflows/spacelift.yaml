name: Create Spacelift Stack

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  create-stack:
    runs-on: ubuntu-latest
    steps:
      - name: Create Spacelift Stack
        env:
          API_KEY_ID: ${{ secrets.SPACELIFT_API_KEY_ID }}
          API_KEY_SECRET: ${{ secrets.SPACELIFT_API_KEY_SECRET }}
        run: |
          # Install dependencies
          sudo apt-get update
          sudo apt-get install -y jq curl

          # Get token
          TOKEN=$(curl -s -X POST https://auth.spacelift.io/oauth/token \
            -H "Content-Type: application/json" \
            -d '{
              "grant_type": "client_credentials",
              "client_id": "'"$API_KEY_ID"'",
              "client_secret": "'"$API_KEY_SECRET"'",
              "audience": "https://spacelift.io"
            }' | jq -r .access_token)

          # Define GraphQL Mutation
          GRAPHQL_QUERY=$(cat <<EOF
mutation CreateStack {
  stackCreate(input: {
    id: "my-stack-id",
    name: "My Stack from GHA",
    repository: {
      repoURL: "https://github.com/eswar21-sudo/tgw.git",
      branch: "main"
    },
    space: "root",
    terraformConfig: {
      projectRoot: "tgw-module",
      terraformVersion: "1.5.0"
    },
    autodeploy: true,
    runnerImage: "public.ecr.aws/spacelift/terraform:latest"
  }) {
    stack {
      id
      name
    }
  }
}
EOF
)

# Encode and send via GraphQL safely
RESPONSE=$(jq -n --arg query "$GRAPHQL_QUERY" '{query: $query}' | \
  curl -s -X POST https://eswar21-sudo.app.spacelift.io/graphql \
    -H "Authorization: Bearer $TOKEN" \
    -H "Content-Type: application/json" \
    -d @-)

echo "âœ… Response from Spacelift:"
echo "$RESPONSE"
